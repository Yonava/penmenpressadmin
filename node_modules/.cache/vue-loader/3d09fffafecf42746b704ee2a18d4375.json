{"remainingRequest":"/Users/yona/Desktop/penmenpressadmin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yona/Desktop/penmenpressadmin/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yona/Desktop/penmenpressadmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yona/Desktop/penmenpressadmin/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/Users/yona/Desktop/penmenpressadmin/src/App.vue","mtime":1670453695873},{"path":"/Users/yona/Desktop/penmenpressadmin/node_modules/cache-loader/dist/cjs.js","mtime":1670453380880},{"path":"/Users/yona/Desktop/penmenpressadmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1670453381412},{"path":"/Users/yona/Desktop/penmenpressadmin/node_modules/cache-loader/dist/cjs.js","mtime":1670453380880},{"path":"/Users/yona/Desktop/penmenpressadmin/node_modules/vue-loader/lib/index.js","mtime":1670453381275}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}